version: 2.1

orbs:
  vr: kohirens/version-release@4.4.4
  aws: circleci/aws-cli@5.1.2

parameters:
  secrets:
    default: kohirens-automation
    description: Secrets context
    type: string
  secrets_docker:
    default: kohirens-docker-automation
    description: Secrets context
    type: string
  secrets_iac_test:
    default: kohirens-iac-test
    description: Secrets context
    type: string
  ssh_finger:
    default: "SHA256:yfSgz131DaRnkrMhsbLYExmhp2xIMr8UJH3daAC4dC8"
    description: SSH fingerprint.
    type: string
  triggered_flow:
    default: "workflow-selector"
    description: Workflow to be executed.
    type: string

commands:
  aws-oidc-setup:
    description: Setup AWS auth using OIDC token
    parameters:
      role_env_var:
        default: CIRCLECI_OIDC_ROLE_ARN
        type: string
      session_duration:
        default: 900
        type: integer
    steps:
      - run:
          name: Get AWS credentials
          command: |
            set -- $(aws sts assume-role-with-web-identity --role-arn "${CIRCLECI_OIDC_ROLE_ARN}" --role-session-name "${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}" --web-identity-token "${CIRCLE_OIDC_TOKEN}" --duration-seconds << parameters.session_duration >> --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
            aws_key="${1}" && shift
            aws_secret="${1}" && shift
            aws_token="${1}" && shift
            mkdir -p ~/.aws
            echo '[default]' > ~/.aws/credentials
            echo "aws_access_key_id=${aws_key}" >> ~/.aws/credentials
            echo "aws_secret_access_key=${aws_secret}" >> ~/.aws/credentials
            echo "aws_session_token=${aws_token}" >> ~/.aws/credentials
            if [ -f ~/.aws/credentials ]; then
                echo "credentials retrieved"
                exit 0
            fi
            echo "could not retrieve credentials"
            exit 1
      - run:
          name: Verify AWS credentials
          command: |
            aws sts get-caller-identity
jobs:
  run-test:
    docker:
      - image: hashicorp/terraform:1.7.0
        auth:
          username: ${DH_USER}
          password: ${DH_PASS}
    steps:
      - checkout
      - run:
          command: terraform fmt -check -write=false -diff
      - aws/install
      - aws-oidc-setup
      - run:
          command: |
            terraform init
            terraform validate
            terraform test

workflows:
  quality_checks:
    jobs:
      - run-test:
          context:
            - << pipeline.parameters.secrets_docker >>
            - << pipeline.parameters.secrets_iac_test >>
          filters: { branches: { ignore: /main|auto-update-changelog/ } }

  workflow-selector:
    when:
      and:
        - equal: ["workflow-selector", << pipeline.parameters.triggered_flow >>]
        - equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - vr/workflow-selector:
          context: << pipeline.parameters.secrets >>
          ssh_finger: << pipeline.parameters.ssh_finger >>

  publish-changelog:
    when:
      and:
        - equal: ["publish-changelog", << pipeline.parameters.triggered_flow >>]
    jobs:
      - vr/publish-changelog:
          context: << pipeline.parameters.secrets >>
          ssh_finger: << pipeline.parameters.ssh_finger >>

  publish-release-tag:
    when:
      and:
        - equal: ["publish-release-tag", << pipeline.parameters.triggered_flow >>]
    jobs:
      - vr/tag-and-release:
          context: << pipeline.parameters.secrets >>
